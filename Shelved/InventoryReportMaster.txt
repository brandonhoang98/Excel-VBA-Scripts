Sub InventoryUpdate()

Dim Rng As Range
Dim WorkRng As Range
Dim InvRng As Range
Dim WkSheet As Worksheet
Dim InvSheet As Worksheet

'On Error Resume Next
Call FilterReport
xTitleId = "Report upper limit cell (WO)"
xInventoryID = "Inventory sheet Cell"
Set WorkRng = Application.Selection
Set WorkRng = Application.InputBox("Select Top left report cell with WO Status", xTitleId, WorkRng.Address, Type:=8)
Set InvRng = Application.Selection
Set InvRng = Application.InputBox("Select any Inventory cell", xInventoryID, InvRng.Address, Type:=8)

Set WkSheet = WorkRng.Worksheet
Set InvSheet = InvRng.Worksheet

'Need to activate a worksheet in order to pull ranges and cells, (Worksheet variable).Activate does this
WkSheet.Activate
Do Until IsEmpty(WorkRng)
    Dim PartRng As Range
    WkSheet.Activate
    Set PartRng = Cells(WorkRng.Row, 17)
    Dim PartArray() As String
    Dim PartRngVal As String
    PartRngVal = PartRng.Value
    PartArray = Split(PartRngVal, vbLf)
    '-------------------------------------------------------------------------------
    'Check for empty line that would indicate more than one shipment for the trip here
    Dim ArrayBound As Integer
    For I = 0 To (UBound(PartArray) - LBound(PartArray))
        If Trim(PartArray(I) & vbNullString) = vbNullString Or Len(PartArray(I)) < 2 Then
            If (PartArray(I - 1) <> "" And PartArray(I + 1) <> "") Then
                ArrayBound = I
                Exit For
            End If
            Exit For
        End If
        ArrayBound = I
    Next
    
    '--------------------------------------------------------------------------------
    
    For I = 0 To ArrayBound
        Dim PartStr As String
        If (PartArray(I) <> "") Then
            PartStr = PartArray(I)
            Dim StringArray() As String
            StringArray = Split(PartStr, vbTab)
            Dim IdStr As String
            IdStr = StringArray(0)
            If IsNumeric(IdStr) Then
                InvSheet.Activate
                Dim bal As Integer
                Dim balRng As Range
                Set balRng = InvSheet.Columns(4).Find(What:=IdStr, LookAt:=xlWhole)
                If IsEmpty(Cells(balRng.Row, 10)) Then
                    InvSheet.Cells(balRng.Row, 10).Value = InvSheet.Cells(balRng.Row, 9).Value
                End If
                
                bal = InvSheet.Cells(balRng.Row, 10).Value
                
                bal = bal - 1
                InvSheet.Cells(balRng.Row, 10).Value = bal
                
                If IsEmpty(Cells(balRng.Row, 11)) Then
                    Cells(balRng.Row, 11).Value = 1
                Else
                    Dim val As Integer
                    val = Cells(balRng.Row, 11).Value
                    val = val + 1
                    Cells(balRng.Row, 11).Value = val
                End If
                
                InvSheet.Cells(balRng.Row, 9).Interior.ColorIndex = 27
                InvSheet.Cells(balRng.Row, 10).Interior.ColorIndex = 27
                '7/2  Added highlighting of cells
            End If
        End If
    Next
    Set Rng = WkSheet.Cells(WorkRng.Row + 1, WorkRng.Column)
    Set WorkRng = Rng
    
Loop

Dim ShpSheet As Worksheet
Dim ShpIndex As Integer
Set ShpSheet = Sheets.Add
ShpIndex = 1
InvSheet.Activate
'Copy Paste any unmodified values into row J as well and leave the modified values as is, use IsEmpty on Cells
Dim foo As Integer
foo = 2
Do Until IsEmpty(Cells(foo, 9))

    If (IsEmpty(Cells(foo, 10))) Then
        Cells(foo, 10).Value = Cells(foo, 9).Value
    Else
        Call RowTransfer(ShpIndex, foo, ShpSheet, InvSheet)
        ShpIndex = ShpIndex + 1
        InvSheet.Activate
    End If
    foo = foo + 1
Loop

End Sub

Sub RowTransfer(rowIndex As Integer, hostIndex As Integer, transferSheet As Worksheet, hostSheet As Worksheet)
    Dim diff As Double
    Dim val1 As Double
    Dim val2 As Double
    transferSheet.Activate
    hostSheet.Rows(hostIndex).Copy (transferSheet.Rows(rowIndex))
    transferSheet.Cells(rowIndex, 9).Delete
    transferSheet.Cells(rowIndex, 9).Delete
    
End Sub

Sub FilterReport()

Dim TodayDate As String
Dim Rng As Range
Dim WorkRng As Range
Dim LowerBound As Integer

xTitleId = "Report Lower Boundary"
xTitleDate = "Report Date"
Set WorkRng = Application.Selection
Set WorkRng = Application.InputBox("Lowest Row/Cell on Table", xTitleId, WorkRng.Address, Type:=8)
TodayDate = Application.InputBox("Enter date (XX/XX/XXXX)", xTitleDate, Type:=2)

WorkRng.Worksheet.Activate
Columns("P").Delete 'Get rid of the redundant date modified column to make the search algorithm simpler


LowerBound = WorkRng.Row

'Primary Loop to filter out entries that don't have part shipping on the day
For I = LowerBound To 2 Step -1
    Set Rng = Rows(I).Cells
    If (Cells(I, 1).Value = "In Progress") Then
        Rng.EntireRow.Delete
    Else
        Dim j As Integer
        j = 13
        Do While IsEmpty(Cells(I, j)) And j > 10
            j = j - 1
        Loop
        Dim ShipDate As String
        ShipDate = CStr(Cells(I, j).Value)
        If (ShipDate <> TodayDate) Then
            Rng.EntireRow.Delete
        End If
    End If
Next

Dim PartRng As Range
Dim k As Integer
k = 2
Do Until IsEmpty(Cells(k, 1).Value)
    Dim p As Integer
    p = 9
    Do While IsEmpty(Cells(k, p).Value) And p > 6
        p = p - 1
    Loop
    
    Dim RowRng As Range
    Cells(k, 17) = Cells(k, p)
    Set PartRng = Cells(k, 17)
    Set RowRng = Rows(k).Cells

    'Dim splitVals() As Variant
    'Dim lLFs As Long
    
    'This function to split doesn't work at the moment, needs separate script to run to work
    'Currently redundant when used in tandem with inventoryreportupdate
    'splitVals = Split(PartRng.Value, vbLf)
    'lLFs = UBound(splitVals)
    'If lLFs > 0 Then
        'RowRng.Offset(1, 0).Resize(RowSize:=lLFs).Insert shift:=xlShiftDown 'specifies the amount of extra rows to make, inserts X amount of extra lines at the cell below, need to do this for every other column
        'RowRng.Offset(1, 0).Resize(RowSize:=lLFs).Value = RowRng.Value 'New line to copy other column information
        'PartRng.Resize(RowSize:=lLFs + 1).Value = Application.WorksheetFunction.Transpose(splitVals) 'vbLf used as delimiter for tranposing
        'k = k + lLFs
    'End If

    k = k + 1
Loop

End Sub










